// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// ! to run migration: prisma migrate dev --name <MIGRATION_NAME>

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  firstName String
  lastName  String
  email     String     @unique
  password  String     @unique
  isAdmin   Boolean
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userPlans UserPlan[]
}

model School {
  id               String        @id @default(uuid())
  name             String        @unique
  acronym          String        @unique
  majors           Major[]
  minors           Minor[]
  coreRequirements Requirement[]
  userPlans        UserPlan[]
}

model Major {
  id           String        @id @default(uuid())
  name         String        @unique
  school       School        @relation(fields: [schoolId], references: [id])
  schoolId     String
  majorType    MajorType
  requirements Requirement[]
  userPlans    UserPlan[]    @relation("UserPlanMajors")
}

enum MajorType {
  BA
  BS
}

model Minor {
  id           String        @id @default(uuid())
  name         String        @unique
  school       School        @relation(fields: [schoolId], references: [id])
  schoolId     String
  requirements Requirement[]
  userPlans    UserPlan[]    @relation("UserPlanMinors")
}

model Course {
  id                  String              @id @default(uuid())
  title               String              @unique
  code                String?             @unique
  credits             Int?
  requiredBy          Requirement[]
  plannedCourses      PlannedCourse[]
  preRequisiteGroups  PrerequisiteGroup[] @relation("CourseToGroup")
  requiredByGroups    PrerequisiteGroup[] @relation("GroupToCourse")
  prerequisiteGroupId String?
}

model PrerequisiteGroup {
  id            String    @id @default(uuid())
  requiredFor   Course    @relation("GroupToCourse", fields: [requiredForId], references: [id])
  requiredForId String
  type          LogicType
  prerequisites Course[]  @relation("CourseToGroup")
}

enum LogicType {
  AND
  OR
}

model Requirement {
  id              String          @id @default(uuid())
  requirementType RequirementType
  major           Major?          @relation(fields: [majorId], references: [id])
  minor           Minor?          @relation(fields: [minorId], references: [id])
  school          School?         @relation(fields: [schoolId], references: [id])
  course          Course          @relation(fields: [courseId], references: [id])
  majorId         String?
  minorId         String?
  schoolId        String?
  courseId        String
}

enum RequirementType {
  MAJOR
  MINOR
  CORE
}

model UserPlan {
  id                 String         @id @default(uuid())
  title              String
  user               User           @relation(fields: [userId], references: [id])
  userId             String
  expectedGraduation Int
  school             School         @relation(fields: [schoolId], references: [id])
  schoolId           String
  semesters          SemesterPlan[]
  majors             Major[]        @relation("UserPlanMajors")
  minors             Minor[]        @relation("UserPlanMinors")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

model SemesterPlan {
  id         String          @id @default(uuid())
  UserPlan   UserPlan        @relation(fields: [userPlanId], references: [id])
  userPlanId String
  semester   Semester
  courses    PlannedCourse[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model PlannedCourse {
  id             String       @id @default(uuid())
  semesterPlan   SemesterPlan @relation(fields: [semesterPlanId], references: [id])
  course         Course       @relation(fields: [courseId], references: [id])
  semesterPlanId String
  courseId       String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([semesterPlanId, courseId]) // Prevent duplicate course in a semester
}

enum Semester {
  FRESH_FALL
  FRESH_SPRING
  SOPH_FALL
  SOPH_SPRING
  JUNIOR_FALL
  JUNIOR_SPRING
  SENIOR_FALL
  SENIOR_SPRING
}
